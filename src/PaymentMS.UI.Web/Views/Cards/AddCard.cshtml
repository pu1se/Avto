@model AddStripeCardViewModel

@{
    ViewBag.Title = "Add Card";
    Layout = "_Layout";
}

<div class="container">
    <div class="offset-2 col-md-8">

        <div class="row">
            <h2 class="col-md-12 text-center">Save Card</h2>
        </div>

        <br />

        @await Html.PartialAsync("Notification", Model)

        <form id="payment-form" action="@Url.Action("AddCard")" method="post">

            <div class="row">
                <div class="col-md-12 radio-group">
                    <h6>Add payment way for Reseller</h6>
                    @foreach (var receiver in Model.ReceiverList)
                    {
                        <div class="row form-check">
                            @Html.RadioButtonFor(model => model.SelectedReceiverId, receiver.ReceiverOrganizationId,
                                new
                                {
                                    id = receiver.ReceiverOrganizationId,
                                    @class = "form-check-input",
                                    style = "margin-top: 8px;",
                                    publickey = receiver.PublicKey,
                                    receivername = receiver.ReceiverOrganizationName,
                                    @checked = receiver.ReceiverOrganizationId == Model.SelectedReceiverId
                                })
                            <label for="@receiver.ReceiverOrganizationId" class="form-check-label">@receiver.ReceiverOrganizationName</label>
                        </div>
                    }
                </div>
            </div>

            <br />

            <div data-url="@Url.Action("GetCurrentCard")"></div>

            <br/>

            <h6>New Card Info:</h6>    

            <div class="row card-img">
                <div class="col-md-5">
                    <div class="row cardNumber">
                        <div id="cardNumber"></div>
                    </div>
                </div>

                <div class="col-md-2">
                    <div class="expireLabel">
                        VALID
                        <br/>
                        THRU
                    </div>
                    <div class="row cardExpiry">
                        <div id="cardExpiry">
                        </div>
                    </div>
                </div>
                <div class="col-md-1">
                    <div class="row cardCvc">
                        <div id="cardCvc"></div>
                    </div>
                </div>
            </div>

            <br />

            <div class="row">
                <button type="submit" class="btn btn-primary col-md-12">
                    Save card
                </button>
            </div>
        </form>
        
        <br />
    </div>
</div>

<script src="https://js.stripe.com/v3/"></script>

<script>

    let receiverUrlParam = "/#/receivers/";
    let selectedRadioBtn = $("[type=radio]:checked:first");
    initStateByRadioControl(selectedRadioBtn);

    $("input[name=SelectedReceiverId]").change(function() {
        let selectedRadioBtn = $(this);
        initStateByRadioControl(selectedRadioBtn);
    });


    // Submit the form with the token ID.
    function stripeTokenHandler(token) {
        // Insert the token ID into the form so it gets submitted to the server
        var form = document.getElementById('payment-form');
        var hiddenInput = document.createElement('input');
        hiddenInput.setAttribute('type', 'hidden');
        hiddenInput.setAttribute('name', '@nameof(Model.Token)');
        hiddenInput.setAttribute('value', token.id);
        form.appendChild(hiddenInput);

        // Submit the form
        form.submit();
    }

    function createStripeControl(controlName, elements) {

        const stripeControl = elements.create(controlName,
            {
                classes: {
                    base: "form-control col-md-12 stripe-control ",
                    focus: "green",
                    invalid: "error"
                }
            });
        stripeControl.mount('#' + controlName);
        const errorControlName = controlName + '-errors';

        $(`#${controlName}`)
            .closest(".row")
            .append(
                `<div class="row">
                    <div id="${errorControlName}" role="alert" class="col text-danger"></div>
                 </div>`);

        stripeControl.addEventListener('change', function (event) {
            var displayError = document.getElementById(errorControlName);
            if (event.error) {
                displayError.textContent = event.error.message;
            } else {
                displayError.textContent = '';
            }
        });

        return stripeControl;
    }

    function initStateByRadioControl(selectedRadioBtn) {
        
        $(".container form button").text("Save card for " + selectedRadioBtn.attr("receivername"));
        var stripe = Stripe(selectedRadioBtn.attr("publickey"));
        var elements = stripe.elements();
        const card = createStripeControl("cardNumber", elements);
        createStripeControl("cardExpiry", elements);
        createStripeControl("cardCvc", elements);


        const div = $("div[data-url]");
        div.load(div.attr("data-url") + "?receiverOrganizationId=" + selectedRadioBtn.attr("id"));



        // Handle form submission.
        var form = document.getElementById('payment-form');
        form.addEventListener('submit', function (event) {
            event.preventDefault();
            stripe.createToken(card).then(function (result) {
                if (result.error) {
                    // Inform the user if there was an error.
                    var errorElement = document.getElementById('cardNumber-errors');
                    errorElement.textContent = result.error.message;
                } else {
                    // Send the token to your server.
                    stripeTokenHandler(result.token);
                }
            });
        });

    }
</script>

<style>
    .green {
        border: solid green 1.2px;
    }
    .error {
        border: solid darkred 1.2px;
    }
    .stripe-control {
        padding-top: 10px;
        background-color: #eee;
        border: solid 1px #999;
    }

    input[type=text]:focus, input[type=email]:focus {
        border: solid green 1.2px;
        box-shadow: none;
    }

    input.middle:focus {
        outline-width: 0;
    }

    .card-img {
        background: url('@Url.Content("~/card3.png")'); height: 275px; background-repeat: no-repeat;
    }

    .cardNumber {
        position: relative;
        top: 110px;
        left: 50px;
        font-size: 16px;
    }

    .cardExpiry {
        position: relative;
        top: 133px;
        left: -70px;
        font-size: 16px;
    }

    .cardCvc {
        position: relative;
        top: 195px;
        left: 40px;
    }

    .expireLabel {
        font-size: 12px !important;
        position: relative;
        top: 170px;
        left: -140px;
    }
</style>