// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PaymentMS.DAL;

namespace PaymentMS.DAL.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PaymentMS.DAL.Entities.ApiLogEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<long>("ExecutionTimeInMilliSec")
                        .HasColumnType("bigint");

                    b.Property<string>("HttpMethod")
                        .HasColumnType("nvarchar(32)")
                        .HasMaxLength(32);

                    b.Property<DateTime>("LastUpdatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Logs")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(8192);

                    b.Property<string>("PathToAction")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<int>("ResponseCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ApiLogs");
                });

            modelBuilder.Entity("PaymentMS.DAL.Entities.BalanceClientEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(26, 10)");

                    b.Property<Guid>("BalanceProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BalanceProviderId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("BalanceClients");
                });

            modelBuilder.Entity("PaymentMS.DAL.Entities.BalanceProviderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CreditLimit")
                        .HasColumnType("decimal(26, 10)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(8)")
                        .HasMaxLength(8);

                    b.Property<bool>("IsStripeCardIncomeEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWireTransferIncomeEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("BalanceProviders");
                });

            modelBuilder.Entity("PaymentMS.DAL.Entities.CalculatedCurrencyExchangeRateEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExchangeDate")
                        .HasColumnType("Date");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(26, 10)");

                    b.Property<string>("FromCurrencyCode")
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime>("LastUpdatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ToCurrencyCode")
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ExchangeDate")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("FromCurrencyCode");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ToCurrencyCode");

                    b.HasIndex("FromCurrencyCode", "ToCurrencyCode", "ExchangeDate", "OrganizationId");

                    b.ToTable("CalculatedCurrencyExchangeRates");
                });

            modelBuilder.Entity("PaymentMS.DAL.Entities.CurrencyEntity", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(8)")
                        .HasMaxLength(8);

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.HasKey("Code");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("PaymentMS.DAL.Entities.CurrencyExchangeConfigEntity", b =>
                {
                    b.Property<string>("FromCurrencyCode")
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("ToCurrencyCode")
                        .HasColumnType("nvarchar(8)");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("CustomRate")
                        .HasColumnType("decimal(26, 10)");

                    b.Property<int>("ExchangeProvider")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Surcharge")
                        .HasColumnType("decimal(26, 10)");

                    b.HasKey("FromCurrencyCode", "ToCurrencyCode", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ToCurrencyCode");

                    b.ToTable("CurrencyExchangeConfigs");
                });

            modelBuilder.Entity("PaymentMS.DAL.Entities.CurrencyExchangeRateEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExchangeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExchangeProvider")
                        .HasColumnType("int");

                    b.Property<string>("FromCurrencyCode")
                        .HasColumnType("nvarchar(8)");

                    b.Property<bool>("HasExtraInfoForRate")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MaxDayRate")
                        .HasColumnType("decimal(26, 10)");

                    b.Property<decimal>("MinDayRate")
                        .HasColumnType("decimal(26, 10)");

                    b.Property<decimal>("OpenDayRate")
                        .HasColumnType("decimal(26, 10)");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(26, 10)");

                    b.Property<string>("ToCurrencyCode")
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("ExchangeDate");

                    b.HasIndex("ExchangeProvider");

                    b.HasIndex("FromCurrencyCode");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ToCurrencyCode");

                    b.ToTable("CurrencyExchangeRates");
                });

            modelBuilder.Entity("PaymentMS.DAL.Entities.OrganizationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(512)")
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("PaymentMS.DAL.Entities.PaymentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BalanceClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(2048)")
                        .HasMaxLength(2048);

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExternalMetadata")
                        .HasColumnType("nvarchar(2048)")
                        .HasMaxLength(2048);

                    b.Property<DateTime>("LastUpdatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(26, 10)");

                    b.Property<string>("PaymentCurrency")
                        .HasColumnType("nvarchar(8)")
                        .HasMaxLength(8);

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<Guid?>("SendingWayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TransactionLog")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(8192);

                    b.HasKey("Id");

                    b.HasIndex("BalanceClientId");

                    b.HasIndex("SendingWayId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("PaymentMS.DAL.Entities.ReceivingWayEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BalanceProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Configuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BalanceProviderId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("PaymentReceivingWays");
                });

            modelBuilder.Entity("PaymentMS.DAL.Entities.SendingWayEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Configuration")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(4096);

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdatedDateUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReceivingWayId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ReceivingWayId");

                    b.ToTable("PaymentSendingWays");
                });

            modelBuilder.Entity("PaymentMS.DAL.Entities.BalanceClientEntity", b =>
                {
                    b.HasOne("PaymentMS.DAL.Entities.BalanceProviderEntity", "BalanceProvider")
                        .WithMany()
                        .HasForeignKey("BalanceProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PaymentMS.DAL.Entities.OrganizationEntity", "Organization")
                        .WithMany("BalanceClients")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PaymentMS.DAL.Entities.BalanceProviderEntity", b =>
                {
                    b.HasOne("PaymentMS.DAL.Entities.OrganizationEntity", "Organization")
                        .WithMany("BalanceProviders")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PaymentMS.DAL.Entities.CalculatedCurrencyExchangeRateEntity", b =>
                {
                    b.HasOne("PaymentMS.DAL.Entities.CurrencyEntity", "FromCurrencyEntity")
                        .WithMany()
                        .HasForeignKey("FromCurrencyCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PaymentMS.DAL.Entities.OrganizationEntity", "Organization")
                        .WithMany("CalculatedCurrencyExchangeRates")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PaymentMS.DAL.Entities.CurrencyEntity", "ToCurrencyEntity")
                        .WithMany()
                        .HasForeignKey("ToCurrencyCode")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PaymentMS.DAL.Entities.CurrencyExchangeConfigEntity", b =>
                {
                    b.HasOne("PaymentMS.DAL.Entities.CurrencyEntity", "FromCurrencyEntity")
                        .WithMany()
                        .HasForeignKey("FromCurrencyCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PaymentMS.DAL.Entities.OrganizationEntity", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PaymentMS.DAL.Entities.CurrencyEntity", "ToCurrencyEntity")
                        .WithMany()
                        .HasForeignKey("ToCurrencyCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PaymentMS.DAL.Entities.CurrencyExchangeRateEntity", b =>
                {
                    b.HasOne("PaymentMS.DAL.Entities.CurrencyEntity", "FromCurrencyEntity")
                        .WithMany()
                        .HasForeignKey("FromCurrencyCode")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PaymentMS.DAL.Entities.OrganizationEntity", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PaymentMS.DAL.Entities.CurrencyEntity", "ToCurrencyEntity")
                        .WithMany()
                        .HasForeignKey("ToCurrencyCode")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PaymentMS.DAL.Entities.PaymentEntity", b =>
                {
                    b.HasOne("PaymentMS.DAL.Entities.BalanceClientEntity", "BalanceClient")
                        .WithMany("Payments")
                        .HasForeignKey("BalanceClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PaymentMS.DAL.Entities.SendingWayEntity", "SendingWay")
                        .WithMany("Payments")
                        .HasForeignKey("SendingWayId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PaymentMS.DAL.Entities.ReceivingWayEntity", b =>
                {
                    b.HasOne("PaymentMS.DAL.Entities.BalanceProviderEntity", "BalanceProvider")
                        .WithMany("ReceivingWays")
                        .HasForeignKey("BalanceProviderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PaymentMS.DAL.Entities.OrganizationEntity", "Organization")
                        .WithMany("ReceivingWays")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PaymentMS.DAL.Entities.SendingWayEntity", b =>
                {
                    b.HasOne("PaymentMS.DAL.Entities.OrganizationEntity", "Organization")
                        .WithMany("SendingWays")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PaymentMS.DAL.Entities.ReceivingWayEntity", "ReceivingWay")
                        .WithMany("SendingWays")
                        .HasForeignKey("ReceivingWayId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
