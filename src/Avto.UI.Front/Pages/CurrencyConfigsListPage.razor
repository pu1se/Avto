@page "/"
@page "/currency-configs"

<h3>Currency</h3>

@if (!Model.ErrorMessage.IsNullOrEmpty())
{
    <br/>
    <div class="row">
        <h4 class="col-md-12 text-center" id="error" style="border: solid #cd0a0a 2px; background-color: #f8e8e6; color: #cd0a0a; padding: 10px;">
            @Model.ErrorMessage
        </h4>
    </div>
    <br/>
}

<PageViewer PageModel="@Model">
    @if (Model.CurrencyConfigs.Any())
    {
        <br />
        <div class="row">
            <div class="col-4">
                <span>Your default currency:</span>
            </div>

            <div class="offset-6 col-2">
                @*<button @onclick="OnRefreshRatesBtnClick" class="btn btn-light">Refresh rates</button>*@
            </div>
        </div>
        <div>
            <span style="color: #999">@Model.CurrencyConfigs.First().FromCurrency</span>
        </div>
        <br/>
        <br/>
        <table class="table table-hover">
            <thead>
            <tr>
                <th>Currency</th>
                <th>Source</th>
                <th>Base rate</th>
                <th>Surcharge, %</th>
                <th>Final rate</th>
                <th>Customers</th>
                <th></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var config in Model.CurrencyConfigs)
            {
                <tr>
                    <td style="text-align: start;">@config.ToCurrency</td>
                    <td>@config.RateSourceProvider</td>
                    <td>@config.ExchangeRate</td>
                    <td>@config.SurchargeAsPercent</td>
                    <td>@config.RateWithSurcharge</td>
                    <td>1</td>
                    <td>
                        <a href="/currency-configs/@config.ToCurrency" style="text-decoration: underline;">
                            edit
                        </a>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
    else
    {
        <br />
        <br />
        <br />
        <br />
        <br />
        <p>Currency list is empty. Please add supported currencies.</p>
    }


    <a href='/currency-configs/Add'>
        <span class="oi oi-plus" aria-hidden="true" style="vertical-align: text-bottom"></span> <span style="text-decoration: underline;">add</span>
    </a>
</PageViewer>

<style>
    .table {
        text-align: center;
    }

    .table th:first-child {
        text-align: start;
    }
</style>


@using Avto.Api.Controllers
@using Avto.DAL
@using Avto.UI.Front.ApiRequests
@using Avto.UI.Front.ViewModels
@inject ExchangeOrganizationConfigApiClient ExchangeConfigApi
@inject ExchangeProviderApiClient ProviderApi
@inject NavigationManager Navigation
@inherits BasePage<CurrencyConfigListPageModel>
@code {
    protected override async Task OnInitializedAsync()
    {
        var path = Navigation.Uri.Replace(Navigation.BaseUri, "");
        if (path.IsNullOrEmpty())
        {
#pragma warning disable 4014
            ProviderApi.RefreshRatesForAllProvidersAsync();
#pragma warning restore 4014
            Navigation.NavigateTo("currency-configs");
        }

        var currencyConfigResult = await ExchangeConfigApi.GetConfigsAsync(TestData.FrontSellerOrganizationId);
        if (!currencyConfigResult.IsSuccess)
        {
            ShowError(currencyConfigResult.ErrorMessage);
            return;
        }

        var exchangeRateListResult = await ExchangeConfigApi.GetRatesAsync(TestData.FrontSellerOrganizationId);
        if (!exchangeRateListResult.IsSuccess)
        {
            ShowError(exchangeRateListResult.ErrorMessage);
            return;
        }


        Model.CurrencyConfigs = currencyConfigResult.Data;
        Model.IsReady = true;

        foreach (var config in Model.CurrencyConfigs)
        {
            ExchangeConfigApi.FillConfigWithRate(config, exchangeRateListResult.Data);
        }
    }

    async Task OnRefreshRatesBtnClick()
    {
        var refreshResult = await ProviderApi.RefreshRatesForAllProvidersAsync();
        if (!refreshResult.IsSuccess)
        {
            ShowError(refreshResult.ErrorMessage);
            return;
        }
    }
}