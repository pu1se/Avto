@page "/"

<h2>Currency Exchange Forecasting v<span>@Model.Version</span></h2>
<br />
<PageViewer PageModel="@Model">

    <div class="row">
        <div class="col-12">
            <h4 class="mb-4">Filters</h4>
        </div>
    </div>

    <div class="row">
        <div class="col-10">
            <div class="row">

                <div class="col-2">
                    From
                    <br/>
                    <RadzenDropDown AllowClear="false"
                                    TValue="string"
                                    @bind-Value="Model.Filter.FromCurrency"
                                    Class="dropdown"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    FilterOperator="StringFilterOperator.StartsWith"
                                    AllowFiltering="true"
                                    Data="Model.CurrencyListSource"/>
                </div>
                
                <div class="col-1">
                    <br/>
                    <a style="cursor: pointer" @onclick="OnCurrencyExchangeClick">
                        <i class="fa fa-exchange" aria-hidden="true"></i>
                    </a>
                </div>
                
                <div class="col-2">
                    To
                    <br/>
                    <RadzenDropDown AllowClear="false"
                                    TValue="string"
                                    @bind-Value="Model.Filter.ToCurrency"
                                    Class="dropdown"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    FilterOperator="StringFilterOperator.StartsWith"
                                    AllowFiltering="true"
                                    Data="Model.CurrencyListSource"/>
                </div>
                
                <div class="col-2">
                    From Date
                    <br/>
                    <RadzenDatePicker 
                        @bind-Value="Model.Filter.FromDate" 
                        DateFormat="dd-MM-yyyy" 
                        Class="date-picker"/>
                </div>
                
                <div class="col-2">
                    To Date
                    <br/>
                    <RadzenDatePicker 
                        @bind-Value="Model.Filter.ToDate" 
                        DateFormat="dd-MM-yyyy" 
                        Class="date-picker"/>
                </div>
                
                

            </div>
        </div>
        
        <div class="col-2">
            <div class="row">
                <div class="offset-1 col-2">
                    <br/>
                    <RadzenButton Text="Apply" Click="@(async args => { await this.OnFilterChange(); })"></RadzenButton>
                </div>
            </div>
        </div>
    </div>

    <br/>
    <br/>
    

    <div class="row">
        <div class="col-12">
            
            <RadzenCard Class="w-100 mb-4" Style="display: flex; align-items: center; gap: 0.5rem" >
                <RadzenCheckBox @bind-Value="@Model.ShowTrend" Name="trend"></RadzenCheckBox>
                <RadzenLabel Text="Trend" For="trend" Style="margin-right: 1rem; color: crimson" />
                <RadzenCheckBox @bind-Value="@Model.ShowMean" Name="mean"></RadzenCheckBox>
                <RadzenLabel Text="Mean" For="mean" Style="margin-right: 1rem; color: brown" />
            </RadzenCard>            

            <RadzenChart>

                <RadzenLineSeries Smooth="true" LineType="LineType.Dotted"
                                  Data="Model.ExchangeListSource"
                                  CategoryProperty="ExchangeDate"
                                  Title="Max day rate"
                                  RenderingOrder="1"
                                  Stroke="#aaa"
                                  StrokeWidth="3.5"
                                  ValueProperty="MaxDayRate">
                    <RadzenMarkers MarkerType="MarkerType.Square"/>
                </RadzenLineSeries>

                <RadzenLineSeries Smooth="true" LineType="LineType.Solid"
                                  Data="Model.ExchangeListSource"
                                  CategoryProperty="ExchangeDate"
                                  Title="Open day rate"
                                  RenderingOrder="2"
                                  Stroke="aqua"
                                  ValueProperty="OpenDayRate">
                    <RadzenMarkers MarkerType="MarkerType.Circle"/>
                </RadzenLineSeries>

                <RadzenLineSeries Smooth="true" LineType="LineType.Solid"
                                  Data="Model.ExchangeListSource"
                                  CategoryProperty="ExchangeDate"
                                  Title="Close day rate"
                                  RenderingOrder="3"
                                  Stroke="darkturquoise"
                                  ValueProperty="Rate">
                    <RadzenMarkers MarkerType="MarkerType.Circle"/>
                    <RadzenSeriesTrendLine Visible="@Model.ShowTrend" Stroke="crimson" StrokeWidth="5" LineType="LineType.Dashed"/>
                    <RadzenSeriesMeanLine Visible="@Model.ShowMean" Stroke="brown" StrokeWidth="5" LineType="LineType.Dashed" />
                </RadzenLineSeries>

                <RadzenLineSeries Smooth="true" LineType="LineType.Dotted"
                                  Data="Model.ExchangeListSource"
                                  CategoryProperty="ExchangeDate"
                                  Title="Min day rate"
                                  RenderingOrder="4"
                                  Stroke="#aaa"
                                  StrokeWidth="3.5"
                                  ValueProperty="MinDayRate">
                    <RadzenMarkers MarkerType="MarkerType.Square"/>
                </RadzenLineSeries>

                <RadzenCategoryAxis Padding="5" FormatString="{0:dd-MM-yy}"/>
                <RadzenValueAxis Formatter="@FormatAsUSD">
                    <RadzenGridLines Visible="true"/>
                </RadzenValueAxis>
            </RadzenChart>
        </div>
    </div>

    <style>
        .dropdown {
            width: 100%;
        }
        
        .date-picker {
            width: 165px;
        }

        .date-picker .rz-inputtext {
            padding-right: 0;
            width: 125px;
        }
    </style>
</PageViewer>

@using Microsoft.AspNetCore.Components
@using Avto.UI.Front.ApiRequests
@using Avto.BL.Services.Exchange.GetExchangeRates
@inherits Avto.UI.Front.ViewModels.BasePage<Avto.UI.Front.ViewModels.CurrencyChartPageModel>
@inject ExchangeApiClient _exchangeReportApi
@code {

    string FormatAsUSD(object value)
    {
        return Math.Round((double)value, 6).ToString();
    }

    protected override async Task OnInitializedAsync()
    {
        Model.IsReady = false;
        var getCurrenciesResult = await _exchangeReportApi.GetAvailableCurrencies();
        if (!getCurrenciesResult.IsSuccess)
        {
            ShowError(getCurrenciesResult.ErrorMessage);
        }
        Model.CurrencyListSource = getCurrenciesResult.Data.Select(x => x.Code).ToArray();
        Model.Version = (await _exchangeReportApi.GetVersion()).Data;
        

        Model.Filter = new GetSpecificExchangeRatesInfoQuery
        {
            FromCurrency = "USD",
            ToCurrency = "EUR",
            FromDate = DateTime.Now.AddDays(-30).Date,
            ToDate = DateTime.Now.Date,
        };


        var getExchangeListResult = await _exchangeReportApi.GetExchangeReport(Model.Filter);
        if (!getExchangeListResult.IsSuccess)
        {
            ShowError(getExchangeListResult.ErrorMessage);
        }
        Model.ExchangeListSource = getExchangeListResult.Data;
        Model.ShowTrend = true;

        Model.IsReady = true;
    }

    async Task OnFilterChange()
    {
        Model.IsReady = false;

        var getExchangeListResult = await _exchangeReportApi.GetExchangeReport(Model.Filter);
        if (!getExchangeListResult.IsSuccess)
        {
            ShowError(getExchangeListResult.ErrorMessage);
        }
        Model.ExchangeListSource = getExchangeListResult.Data;

        Model.IsReady = true;
    }

    async Task OnCurrencyExchangeClick()
    {
        (Model.Filter.FromCurrency, Model.Filter.ToCurrency) = (Model.Filter.ToCurrency, Model.Filter.FromCurrency);
        await OnFilterChange();
    }
}
