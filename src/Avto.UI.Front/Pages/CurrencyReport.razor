@page "/report"
@using System.Globalization
@using Avto.BL.Services.Exchange.ExchangePrediction.Handlers.GetCurrencyExchangeInfo
@using Avto.UI.Front.ApiRequests
@using Avto.UI.Front.ViewModels

<h3>CurrencyChart</h3>
<br />
<PageViewer PageModel="@Model">

    <div class="row">
        <div class="col-12">
            <h4 class="mb-4">Filters</h4>
        </div>
    </div>

    <div class="row">
        <div class="col-8">
            <div class="row">

                <div class="col-2">
                    From
                    <br/>
                    <RadzenDropDown AllowClear="false"
                                    TValue="string"
                                    @bind-Value="Model.Filter.FromCurrency"
                                    Change="@(async args => { await this.OnFilterChange(); })"
                                    Class="dropdown"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    FilterOperator="StringFilterOperator.StartsWith"
                                    AllowFiltering="true"
                                    Data="Model.CurrencyListSource"/>
                </div>
                
                <div class="col-1">
                    <br/>
                    <a style="cursor: pointer" @onclick="OnCurrencyExchangeClick">
                        <i class="fa fa-exchange" aria-hidden="true"></i>
                    </a>
                </div>
                
                <div class="col-2">
                    To
                    <br/>
                    <RadzenDropDown AllowClear="false"
                                    TValue="string"
                                    @bind-Value="Model.Filter.ToCurrency"
                                    Change="@(async args => { await this.OnFilterChange(); })"
                                    Class="dropdown"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    FilterOperator="StringFilterOperator.StartsWith"
                                    AllowFiltering="true"
                                    Data="Model.CurrencyListSource"/>
                </div>
                
                <div class="col-2">
                    Period
                    <br/>
                    <RadzenDropDown AllowClear="false"
                                    TValue="int"
                                    @bind-Value="Model.Filter.PeriodInDays"
                                    Change="@(async args => { await this.OnFilterChange(); })"
                                    Class="dropdown"
                                    TextProperty="Value"
                                    ValueProperty="Key"
                                    Data="Model.PeriodInDaysSource"/>
                </div>                

            </div>
        </div>
    </div>

    <br/>
    <br/>
    

    <div class="row">
        <div class="col-12">
            <RadzenChart>
                
                <RadzenLineSeries Smooth="true" LineType="LineType.Solid"
                                  Data="Model.ExchangeListSource"
                                  CategoryProperty="ExchangeDate"
                                  Title="Open day rate"
                                  RenderingOrder="1"
                                  ValueProperty="OpenDayRate">
                    <RadzenMarkers MarkerType="MarkerType.Circle" />
                </RadzenLineSeries>

                <RadzenLineSeries Smooth="true" LineType="LineType.Solid"
                                  Data="Model.ExchangeListSource"
                                  CategoryProperty="ExchangeDate"
                                  Title="Close day rate"
                                  RenderingOrder="2"
                                  ValueProperty="Rate">
                    <RadzenMarkers MarkerType="MarkerType.Circle"/>
                </RadzenLineSeries>
                
                <RadzenLineSeries Smooth="true" LineType="LineType.Dashed"
                                  Data="Model.ExchangeListSource"
                                  CategoryProperty="ExchangeDate"
                                  Title="Min day rate"
                                  RenderingOrder="3"
                                  ValueProperty="MinDayRate">
                    <RadzenMarkers MarkerType="MarkerType.Circle" />
                </RadzenLineSeries>
                
                <RadzenLineSeries Smooth="true" LineType="LineType.Dashed"
                                  Data="Model.ExchangeListSource"
                                  CategoryProperty="ExchangeDate"
                                  Title="Min day rate"
                                  RenderingOrder="4"
                                  ValueProperty="MaxDayRate">
                    <RadzenMarkers MarkerType="MarkerType.Circle" />
                </RadzenLineSeries>

                <RadzenCategoryAxis Padding="5" FormatString="{0:dd-MM-yy}"/>
                <RadzenValueAxis Formatter="@FormatAsUSD">
                    <RadzenGridLines Visible="true"/>
                </RadzenValueAxis>
            </RadzenChart>
        </div>
    </div>

    <style>
        .dropdown {
            width: 100%;
        }
    </style>
</PageViewer>

@inherits BasePage<CurrencyChartPageModel>
@inject ExchangeReportApiClient _exchangeReportApi
@code {

    string FormatAsUSD(object value)
    {
        return Math.Round((double)value, 6).ToString();
    }

    protected override async Task OnInitializedAsync()
    {
        Model.IsReady = false;
        var getCurrenciesResult = await _exchangeReportApi.GetAvailableCurrencies();
        if (!getCurrenciesResult.IsSuccess)
        {
            ShowError(getCurrenciesResult.ErrorMessage);
        }
        Model.CurrencyListSource = getCurrenciesResult.Data.Select(x => x.Code).ToArray();
        Model.PeriodInDaysSource = new Dictionary<int, string>
        {
            {7, "1 week"},
            {14, "2 weeks"},
            {30, "1 month"},
            {92, "3 month"},
            {185, "6 month"},
            {365, "1 year"},
            {1100, "3 year"},
            {36500, "all time"},
        };
        

        Model.Filter = new GetExchangeReportItemQuery
        {
            FromCurrency = "USD",
            ToCurrency = "EUR",
            PeriodInDays = 30
        };


        var getExchangeListResult = await _exchangeReportApi.GetExchangeReport(Model.Filter);
        if (!getExchangeListResult.IsSuccess)
        {
            ShowError(getExchangeListResult.ErrorMessage);
        }
        Model.ExchangeListSource = getExchangeListResult.Data;

        Model.IsReady = true;
    }

    async Task OnFilterChange()
    {
        Model.IsReady = false;

        var getExchangeListResult = await _exchangeReportApi.GetExchangeReport(Model.Filter);
        if (!getExchangeListResult.IsSuccess)
        {
            ShowError(getExchangeListResult.ErrorMessage);
        }
        Model.ExchangeListSource = getExchangeListResult.Data;

        Model.IsReady = true;
    }

    async Task OnCurrencyExchangeClick()
    {
        (Model.Filter.FromCurrency, Model.Filter.ToCurrency) = (Model.Filter.ToCurrency, Model.Filter.FromCurrency);
        await OnFilterChange();
    }
}
